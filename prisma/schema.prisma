// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  SHIPPING
  DELIVERED
}

enum PaymentMethod {
  CASH
  VODAFONE_CASH
  INSTAPAY
  VISA
}

enum PricingRuleType {
  FEE
  DISCOUNT
  PROMO
}

enum PricingApplicationType {
  PERCENTAGE
  FIXED
}

enum BehaviorType {
  VIEW
  PURCHASE
  CART
  WISHLIST
  RATING
}

enum Language {
  EN
  AR
}

enum SuperAdminRole {
  OWNER
  MANAGER
  SALES
}

model User {
  id               Int             @id @default(autoincrement())
  name             String
  email            String          @unique
  firebaseUid      String          @unique
  phoneNumber      String?
  isActive         Boolean         @default(true)
  role             Role            @default(CUSTOMER)
  lastSession      DateTime        @default(now())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  defaultAddressId Int?
  addresses        Address[]
  defaultAddress   Address?        @relation("DefaultAddress", fields: [defaultAddressId], references: [id])
  cart             Cart?
  wishlist         Wishlist?
  orders           Order[]
  behaviors        UserBehavior[]
  preference       UserPreference?

  @@index([role])
  @@index([isActive])
  @@index([lastSession])
}

model Address {
  id         Int      @id @default(autoincrement())
  userId     Int
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  defaultForUsers User[] @relation("DefaultAddress")

  @@index([userId])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      Json
  slug      String   @unique
  parentId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent          Category?                    @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        Category[]                   @relation("CategoryHierarchy")
  products        Product[]
  preferences     UserPreferenceCategory[]
  lastViewedPrefs UserPreferenceLastCategory[]

  @@index([parentId])
}

model Brand {
  id          Int      @id @default(autoincrement())
  name        Json
  slug        String   @unique
  logo        String?
  description Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products        Product[]
  preferences     UserPreferenceBrand[]
  lastViewedPrefs UserPreferenceLastBrand[]
}

model Product {
  id                 Int      @id @default(autoincrement())
  name               Json
  description        Json?
  shortDescription   Json?
  price              Decimal  @db.Decimal(10, 2)
  salePrice          Decimal? @db.Decimal(10, 2)
  discountPercentage Decimal? @db.Decimal(5, 2)
  quantity           Int      @default(0)
  stock              Int?
  isArchived         Boolean  @default(false)
  slug               String   @unique
  images             String[]
  rating             Decimal? @db.Decimal(3, 2)
  categoryName       Json?
  brandName          Json?
  seo                Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  categoryId         Int?
  brandId            Int?

  category          Category?      @relation(fields: [categoryId], references: [id])
  brand             Brand?         @relation(fields: [brandId], references: [id])
  cartItems         CartItem[]
  wishlistItems     WishlistItem[]
  orderItems        OrderItem[]    @relation("ProductOrder")
  variantOrderItems OrderItem[]    @relation("VariantOrder")
  behaviors         UserBehavior[]

  @@index([categoryId])
  @@index([brandId])
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([productId])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items WishlistItem[]
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlistId Int
  productId  Int
  quantity   Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  wishlist Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id])

  @@unique([wishlistId, productId])
  @@index([productId])
}

model Order {
  id               Int           @id @default(autoincrement())
  userId           Int?
  subtotal         Decimal       @db.Decimal(12, 2)
  discount         Decimal?      @db.Decimal(12, 2)
  shippingCost     Decimal       @db.Decimal(12, 2)
  totalAmount      Decimal       @db.Decimal(12, 2)
  status           OrderStatus   @default(PENDING)
  paymentMethod    PaymentMethod
  customerName     String
  shippingPhone    String
  shippingWhatsapp String?
  shippingStreet   String
  shippingCity     String
  shippingCountry  String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  user  User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  items OrderItem[]

  @@index([userId])
  @@index([status])
  @@index([paymentMethod])
}

model OrderItem {
  id          Int         @id @default(autoincrement())
  orderId     Int
  productId   Int?
  variantId   Int?
  quantity    Int
  status      OrderStatus @default(PENDING)
  price       Decimal     @db.Decimal(12, 2)
  totalPrice  Decimal     @db.Decimal(12, 2)
  productName Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation("ProductOrder", fields: [productId], references: [id])
  variant Product? @relation("VariantOrder", fields: [variantId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

model CartPricingRule {
  id              Int                    @id @default(autoincrement())
  name            String
  type            PricingRuleType
  applicationType PricingApplicationType
  value           Decimal                @db.Decimal(12, 2)
  minOrderValue   Decimal?               @db.Decimal(12, 2)
  maxDiscount     Decimal?               @db.Decimal(12, 2)
  startDate       DateTime?
  endDate         DateTime?
  isActive        Boolean                @default(true)
  code            String?                @unique
  description     String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  @@index([type])
  @@index([isActive])
}

model PriceSettings {
  id                     Int      @id @default(autoincrement())
  chargeFee              Decimal? @db.Decimal(12, 2)
  shippingFee            Decimal? @db.Decimal(12, 2)
  currency               String   @default("EGP")
  minOrderValue          Decimal? @db.Decimal(12, 2)
  maxOrderValue          Decimal? @db.Decimal(12, 2)
  bulkDiscountThreshold  Decimal? @db.Decimal(12, 2)
  bulkDiscountPercentage Decimal? @db.Decimal(5, 2)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  discounts  PriceDiscount[]
  promoCodes PricePromoCode[]
}

model PriceDiscount {
  id              Int       @id @default(autoincrement())
  priceSettingsId Int
  name            String
  percentage      Decimal   @db.Decimal(5, 2)
  validFrom       DateTime?
  validTo         DateTime?

  priceSettings PriceSettings @relation(fields: [priceSettingsId], references: [id], onDelete: Cascade)

  @@index([priceSettingsId])
}

model PricePromoCode {
  id              Int       @id @default(autoincrement())
  priceSettingsId Int
  code            String    @unique
  discount        Decimal   @db.Decimal(5, 2)
  validFrom       DateTime?
  validTo         DateTime?
  usageLimit      Int?
  usageCount      Int       @default(0)

  priceSettings PriceSettings @relation(fields: [priceSettingsId], references: [id], onDelete: Cascade)

  @@index([priceSettingsId])
}

model SocialSettings {
  id            Int      @id @default(autoincrement())
  facebookGroup String?
  facebookPage  String?
  instagramPage String?
  whatsappGroup String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ContactSettings {
  id                 Int      @id @default(autoincrement())
  whatsappLink       String?
  phoneNumber        String?
  whatsappNumber     String?
  vodafoneCashNumber String?
  instaPayUrl        String?
  instaPayQrCode     String?
  instaPayNumber     String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model WhatsAppSettings {
  id                         Int       @id @default(autoincrement())
  isEnabled                  Boolean   @default(true)
  connectionStatus           String    @default("disconnected")
  businessPhone              String?
  recipientPhone             String?
  lastConnected              DateTime?
  qrCode                     String?
  sessionData                Json?
  autoReconnect              Boolean   @default(true)
  messageTemplate            Json?
  sendToCustomer             Boolean   @default(false)
  sendToBusiness             Boolean   @default(true)
  businessNotificationNumber String?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
}

model GeneralSettings {
  id               Int      @id @default(autoincrement())
  storeName        String
  storeDescription String?
  currency         String   @default("EGP")
  languageOptions  String[] @default([])
  defaultLanguage  String   @default("en")
  seo              Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model UserBehavior {
  id        Int          @id @default(autoincrement())
  userId    Int
  productId Int
  type      BehaviorType
  value     Decimal?     @db.Decimal(5, 2)
  language  Language
  timestamp DateTime     @default(now())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
  @@index([timestamp])
}

model SuperAdmin {
  id           Int            @id @default(autoincrement())
  name         String?
  email        String         @unique
  passwordHash String
  role         SuperAdminRole @default(MANAGER)
  createdById  Int?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  createdBy          SuperAdmin?         @relation("SuperAdminCreatedBy", fields: [createdById], references: [id])
  createdSuperAdmins SuperAdmin[]        @relation("SuperAdminCreatedBy")
  sessions           SuperAdminSession[]

  @@index([role])
}

model SuperAdminSession {
  id           Int      @id @default(autoincrement())
  token        String   @unique
  superAdminId Int
  userAgent    String?
  ipAddress    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expiresAt    DateTime

  superAdmin SuperAdmin @relation(fields: [superAdminId], references: [id], onDelete: Cascade)

  @@index([superAdminId])
  @@index([token])
}

model UserPreference {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  preferredLanguage Language @default(EN)
  minPrice          Decimal? @db.Decimal(12, 2)
  maxPrice          Decimal? @db.Decimal(12, 2)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user                 User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories           UserPreferenceCategory[]
  brands               UserPreferenceBrand[]
  lastViewedCategories UserPreferenceLastCategory[]
  lastViewedBrands     UserPreferenceLastBrand[]
}

model UserPreferenceCategory {
  id           Int @id @default(autoincrement())
  preferenceId Int
  categoryId   Int

  preference UserPreference @relation(fields: [preferenceId], references: [id], onDelete: Cascade)
  category   Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([preferenceId, categoryId])
  @@index([categoryId])
}

model UserPreferenceBrand {
  id           Int @id @default(autoincrement())
  preferenceId Int
  brandId      Int

  preference UserPreference @relation(fields: [preferenceId], references: [id], onDelete: Cascade)
  brand      Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([preferenceId, brandId])
  @@index([brandId])
}

model UserPreferenceLastCategory {
  id           Int @id @default(autoincrement())
  preferenceId Int
  categoryId   Int

  preference UserPreference @relation(fields: [preferenceId], references: [id], onDelete: Cascade)
  category   Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([preferenceId])
  @@index([categoryId])
}

model UserPreferenceLastBrand {
  id           Int @id @default(autoincrement())
  preferenceId Int
  brandId      Int

  preference UserPreference @relation(fields: [preferenceId], references: [id], onDelete: Cascade)
  brand      Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@index([preferenceId])
  @@index([brandId])
}
